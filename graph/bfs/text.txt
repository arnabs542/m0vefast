
- layer by layer
- zigzag

- largest 357

- number of island1: bfs
- number of island2: union find

- graph valid tree: bfs, or union find
- is graph bipartite: bfs

- shortest path from all points
= kth smallest to original point: minheqp

- k equipment



# 3 ways of representing ediges:
0) matrix:
- eg: number of islands
- for each using ij as coordiante


    0       1
1) [[1,2], [3,4]]:
- eg: is bipartite, shortestPathToallNodes
- for loop: for i in range(len(graph)):
    if not self.bfs(queue, i, coloring):
        return False
      return True
- use given edges to check nei

2) [[1,2], [2,3]]
- eg: graph valid tree : one pass, initlaize with 0
- eg: number of connected component: for loop use counter
- build graph: using dict = defaultdict(list) mutual to check nei
- for each: bfs, pass, visited, node, dict



Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation:
The graph looks like this:
0----1
|    |
|    |
3----2
'''
def isBipartite(self, graph: List[List[int]]) -> bool:
    coloring = [0] * len(graph)
    # 0: not visited, colour: 1, -1
    queue = collections.deque([])
    # for each node, do dfs
    for i in range(len(graph)):
        if not self.bfs(queue, i, coloring):
            return False
    return True

def bfs(self, queue, node, coloring):
    # if visited
    if coloring[node] == 0:
        return True

    queue.append(node)
    coloring[node] = 0

    while queue:
        cur_node = queue.popleft()
        cur_color = coloring[cur_node]

        for nei in graph[cur_node]:
            if coloring[nei] == 0:
                queue.append(nei)
                coloring[nei] = -cur_color

            if coloring[nei] != -cur_color:
                return False
    return True



    def graph_valid_tree(self, n, edges):
        # check not cycle
        if n - 1 != len(edges):
            return False
        # check all connected
        # 2.1 build graph
        neightbours = collections.defaultdict(list)  # dictionalry like object with value is a list
        for u, v in edges:
            neightbours[u].append(v)
            neightbours[v].append(u)
        # 2.2 To detect isolated component, we can use BFS:
        # We just start from any node and delete every node we meet during the BFS.
        # If there is any node left, then there is an isolated component.
        from collections import deque
        '''
        from queue import Queue
        queue = Queue()
        queue.get()
        queue.put(e)
        =======
        from collections import deque
        queue = deque([])
        queue.append(0)
        queue = deque([0])
        queue.popleft()
        '''
        queue = deque([0])
        visited = {}
        visited[0] = True

        while queue:
            cur = queue.popleft()
            # visited[cur] = True   #visited

            for node in neightbours(cur):
                if node not in visited:
                    queue.append(node)
                    visited[cur] = True

        return len(visited) == n
