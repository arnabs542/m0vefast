# graph represented as isBipartite
'''
方法一：BFS
话说看到这个题的第一感觉就是BFS，因为我们要找到遍历所有节点的最少步数，这个正是BFS擅长的。唯一不同的就是这个题允许从多个顶点出发，
也就是说没有了固定的起点。那么需要对BFS稍微改变一点，即在初始化的时候，把所有顶点都放进队列之中，这样，每次把队列的元素pop出来一遍之后就是新的一轮循环，
也就可以认为所有的节点都是同时向前迈进了一步。

这个题使用了一个的技巧，位运算。一般的BFS过程都是只保存访问过的节点即可，因为每个节点只可以使用一次，但是这个题的节点可以访问多次，
那么就是说必须维护一个实时的访问了哪些节点的状态。按道理说，如果不使用位运算而是使用字典等方式保存访问过了的状态也可以，但是，看了给出的图的顶点个数只有12个，
哪怕一个int都会有32个bit够用，所以可以直接使用和图中顶点数相等的位数来保存这个状态是否访问过。这个状态怎么理解？从每个顶点出发到达，所有访问过的节点是状态。
也就是说这个状态是全局唯一的，每个顶点都有2 * N个状态表示它访问的其他节点。有2 ^ N个bit，每个位都代表对应的节点是否访问过。
最终的状态是(1 << N) - 1，即全是1，表示所有节点都访问了。

这个visited是个二维数组，保存的是每个节点的所有状态，对于该题目的BFS，有可能有N * 2^Ｎ个状态，使用visited保存每个节点已经访问的状态，对应状态位置是0/1。

时间复杂度是O(N * (2^N))，空间复杂度是O(N * 2^Ｎ)。

'''
# https://blog.csdn.net/fuxuemingzhu/article/details/82939203
# need to use bit operation
def shortestPathLength(self, graph: List[List[int]]) -> int:
